import telebot
from settings import boards
import mainData
from blackJack import bjData
from settings import repository
from settings import commands

bot = telebot.TeleBot("5319244723:AAEdqpK9SA_ZSQGSbtIfwq-zvQkwEBZcgY0")


def settingsCommands(bot):
    bot.message_handler(func=lambda message: message.text == commands.back)(back)
    bot.message_handler(func=lambda message: message.text == commands.settingsGame)(gameSettings)
    bot.message_handler(func=lambda message: message.text in commands.gameMenu)(autoSumPoints)
    bot.message_handler(func=lambda message: message.text in commands.enableFeatures)(yes)
    bot.message_handler(func=lambda message: message.text in commands.disableFeatures)(no)
    bot.message_handler(func=lambda message: message.text == commands.topUpBalance)(topUpBalance)
    bot.message_handler(func=lambda message: message.text == commands.imageCard)(card)
    bot.message_handler(func=lambda message: message.text in commands.card)(cardSettings)


def menu(message):
    bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=boards.settingsBoard())


@bot.message_handler(func=lambda message: message.text == commands.back)
def back(message):
    if mainData.whereUser == mainData.sections["settings"]:
        bot.send_message(message.chat.id, "–ù–∞–∑–∞–¥", reply_markup=boards.settingsBoard())
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ?)")


@bot.message_handler(func=lambda message: message.text == commands.settingsGame)
def gameSettings(message):
    if mainData.whereUser == mainData.sections["settings"]:
        bot.send_message(message.chat.id,
                         f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã:\n\n–ê–≤—Ç–æ—Å—É–º–º–∞ –æ—á–∫–æ–≤: {repository.printGameSettings(bjData.autoSum)}\n\n"
                         f"–ö–∞—Ä—Ç–∏–Ω–∫–∏: {repository.printGameSettings(bjData.imageCard)}\n\n"
                         f"–°—Ç–∞–≤–∫–∏: {repository.printGameSettings(bjData.rates)}\n\n"
                         f"–ë–∞–ª–∞–Ω—Å: {bjData.balance}üí≤", reply_markup=boards.settingsGameBoard())
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ?)")


@bot.message_handler(func=lambda message: message.text in commands.gameMenu)
def autoSumPoints(message):
    if mainData.whereUser == mainData.sections["settings"]:
        if message.text == commands.gameMenu[0]:
            if not bjData.autoSum:
                bot.send_message(message.chat.id, "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å—É–º–º—É –æ—á–∫–æ–≤?", reply_markup=boards.autoSumBoard())
            else:
                bot.send_message(message.chat.id, "–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å—É–º–º—É –æ—á–∫–æ–≤?", reply_markup=boards.autoSumBoard())
        else:
            if not bjData.rates:
                bot.send_message(message.chat.id, "–í–∫–ª—é—á–∏—Ç—å —Å—Ç–∞–≤–∫–∏?", reply_markup=boards.ratesBoard())
            else:
                bot.send_message(message.chat.id, "–í—ã–∫–ª—é—á–∏—Ç—å —Å—Ç–∞–≤–∫–∏?", reply_markup=boards.ratesBoard())
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ?)")


@bot.message_handler(func=lambda message: message.text in commands.enableFeatures)
def yes(message):
    if mainData.whereUser == mainData.sections["settings"]:
        if message.text == commands.enableFeatures[0]:
            if not bjData.autoSum:
                bjData.autoSum = True
                bot.send_message(message.chat.id, "–ê–≤—Ç–æ—Å—É–º–º–∞ –≤–∫–ª—é—á–µ–Ω–∞", reply_markup=boards.settingsGameBoard())
            else:
                bot.send_message(message.chat.id, "–ê–≤—Ç–æ—Å—É–º–º–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞", reply_markup=boards.settingsGameBoard())
        else:
            if not bjData.rates:
                bjData.rates = True
                bot.send_message(message.chat.id, "–°—Ç–∞–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã", reply_markup=boards.settingsGameBoard())
            else:
                bot.send_message(message.chat.id, "–°—Ç–∞–≤–∫–∏ —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã", reply_markup=boards.settingsGameBoard())

    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ?)")


@bot.message_handler(func=lambda message: message.text in commands.disableFeatures)
def no(message):
    if mainData.whereUser == mainData.sections["settings"]:
        if message.text == commands.disableFeatures[0]:
            if bjData.autoSum:
                bjData.autoSum = False
                bot.send_message(message.chat.id, "–ê–≤—Ç–æ—Å—É–º–º–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞", reply_markup=boards.settingsGameBoard())
            else:
                bot.send_message(message.chat.id, "–ê–≤—Ç–æ—Å—É–º–º–∞ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω–∞", reply_markup=boards.settingsGameBoard())
        else:
            if bjData.rates:
                bjData.rates = False
                bot.send_message(message.chat.id, "–°—Ç–∞–≤–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã", reply_markup=boards.settingsGameBoard())
            else:
                bot.send_message(message.chat.id, "–°—Ç–∞–≤–∫–∏ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω—ã", reply_markup=boards.settingsGameBoard())
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ?)")


@bot.message_handler(func=lambda message: message.text == commands.topUpBalance)
def topUpBalance(message):
    if mainData.whereUser == mainData.sections["settings"]:
        if bjData.balance <= 2:
            bjData.balance = 100
            bot.send_message(message.chat.id, f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω\n–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: {bjData.balance}üí≤",
                             reply_markup=boards.settingsGameBoard())
        else:
            bot.send_message(message.chat.id, f"–ù–∞ —Ç–≤–æ–µ–º –±–∞–ª–∞–Ω—Å–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É",
                             reply_markup=boards.settingsGameBoard())
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ?)")


@bot.message_handler(func=lambda message: message.text == commands.imageCard)
def card(message):
    if mainData.whereUser == mainData.sections["settings"]:
        bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –≤–∏–¥ –∫–∞—Ä—Ç —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=boards.cardsSettingBoard())
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ?)")


@bot.message_handler(func=lambda message: message.text in commands.card)
def cardSettings(message):
    if mainData.whereUser == mainData.sections["settings"]:
        if message.text == commands.card[0]:
            bjData.imageCard = True
            bot.send_message(message.chat.id, "–û–∫–µ–π, –±—É–¥—É –≤—ã–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫)",
                             reply_markup=boards.settingsGameBoard())
        else:
            bjData.imageCard = False
            bot.send_message(message.chat.id, "–û–∫–µ–π, –±—É–¥—É –≤—ã–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞)",
                             reply_markup=boards.settingsGameBoard())
